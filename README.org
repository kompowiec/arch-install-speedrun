* Rules:
1. **General Rules:**  
   - All runs must begin from the official Arch Linux ISO boot environment.  
   - +All commands and actions must be shown on screen.+ (?)
   - VMs are allowed
   - Time starts **when the Arch Linux ISO environment is booted**, and the user gains access to the terminal. This is usually marked by the appearance of the live ISO prompt: `root@archiso ~ #`.
2. **Submission Requirements:**  
   - +All runs must include unedited video proof with clear visibility of commands and system output.+
   - include source code or a script for verification.
* Category rules:
** Any%
- Time ends on neofetch + Enter being put into terminal
- Anything is allowed but external tools (running on another system, like SSH or AutoHotkey, curling an external script, etc)
** Any% Glitchless
- Install Arch Linux from scratch as fast as possible, strictly following the Arch Wiki's official installation guide, without unconventional methods.  
** Low% (boot%)
- Achieve a working bootloader and minimal kernel boot (no additional configurations or sofware).  
- Time ends when when the system boots. This is usually marked by the appearance of the prompt: `archlinux login: _`.
*** Example
DISK="/dev/sda"  # Replace with your disk, e.g., /dev/sda

# Partitioning with sgdisk
sgdisk -Z $DISK                    # Zap existing partitions
sgdisk -n 1:0:+1M -t 1:ef02 $DISK  # BIOS boot partition
sgdisk -n 2:0:0 -t 2:8300 $DISK    # Linux root partition

# Make file system
mkfs.xfs ${DISK}2

# Mount the newly created filesystem
mount ${DISK}2 /mnt

# Enable parallel downloads in pacman (optional)
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf

# Install packages
pacstrap /mnt base linux grub

# Make the system bootable
genfstab -U /mnt > /mnt/etc/fstab
arch-chroot /mnt bash -c "grub-install --target=i386-pc $DISK; grub-mkconfig -o /boot/grub/grub.cfg"

# Finish
echo "Installation complete! Reboot to use the new system."
** NG+
Perform a new Arch Linux installation using previously created configurations, scripts.
** TAS (Tool-Assisted Speedrun/Superplay) 
Use scripting tools, automation, or virtual machines to create a theoretically perfect Arch Linux installation. This could involve precise command sequences, pre-configured scripts, and debugging tools to ensure optimal performance. Manipulate "random" factors in the Arch installation process, such as download mirrors or system configurations, to achieve faster installation speeds (e.g., local mirror or preselecting certain configurations).
* Category Extensions
** Desktop%
- Install and launch any graphical desktop environment  
** Old ISO%
- Complete the installation using an outdated Arch Linux ISO and resolve any compatibility challenges that arise.  
* glossary
**RTA (Real Time Attack)**
- Measure the time taken to install Arch Linux using real-world timing from booting the installation media to achieving the set goal (e.g., a working desktop environment).  
**IGT (In Game Time)**
- Measure the installation time based on system logs or timing utilities that calculate the duration from starting the installation script to system readiness.  
